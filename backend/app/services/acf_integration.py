"""
ACF Integration Service
Handles Advanced Custom Fields integration for WordPress templates
Generates field groups for Brazilian industries
"""

import json
import logging
from typing import Dict, List, Any, Optional
from datetime import datetime
import hashlib
import re

logger = logging.getLogger(__name__)

class ACFIntegrationService:
    """Service for managing ACF field groups and integrations"""
    
    def __init__(self):
        self.field_types = {
            'text': 'text',
            'textarea': 'textarea',
            'number': 'number',
            'email': 'email',
            'url': 'url',
            'select': 'select',
            'checkbox': 'checkbox',
            'radio': 'radio',
            'image': 'image',
            'file': 'file',
            'wysiwyg': 'wysiwyg',
            'color_picker': 'color_picker',
            'date_picker': 'date_picker',
            'time_picker': 'time_picker',
            'repeater': 'repeater',
            'group': 'group',
            'flexible_content': 'flexible_content',
            'gallery': 'gallery',
            'relationship': 'relationship',
            'google_map': 'google_map',
            'true_false': 'true_false'
        }
        
        # Brazilian specific field configurations
        self.brazilian_fields = {
            'cpf': {
                'type': 'text',
                'label': 'CPF',
                'instructions': 'Digite o CPF (apenas números)',
                'maxlength': 14,
                'placeholder': '000.000.000-00',
                'pattern': r'^\d{3}\.\d{3}\.\d{3}-\d{2}$'
            },
            'cnpj': {
                'type': 'text',
                'label': 'CNPJ',
                'instructions': 'Digite o CNPJ (apenas números)',
                'maxlength': 18,
                'placeholder': '00.000.000/0000-00',
                'pattern': r'^\d{2}\.\d{3}\.\d{3}/\d{4}-\d{2}$'
            },
            'telefone': {
                'type': 'text',
                'label': 'Telefone',
                'instructions': 'Telefone com DDD',
                'placeholder': '(11) 99999-9999',
                'pattern': r'^\(\d{2}\) \d{4,5}-\d{4}$'
            },
            'whatsapp': {
                'type': 'text',
                'label': 'WhatsApp',
                'instructions': 'Número do WhatsApp com código do país',
                'placeholder': '5511999999999',
                'prepend': '+55'
            },
            'cep': {
                'type': 'text',
                'label': 'CEP',
                'instructions': 'CEP do endereço',
                'maxlength': 9,
                'placeholder': '00000-000',
                'pattern': r'^\d{5}-\d{3}$'
            },
            'pix': {
                'type': 'text',
                'label': 'Chave PIX',
                'instructions': 'Chave PIX para pagamentos',
                'placeholder': 'email@exemplo.com ou CPF/CNPJ'
            }
        }
    
    def generate_field_group(
        self,
        group_key: str,
        title: str,
        fields: List[Dict[str, Any]],
        location: Optional[List[Dict]] = None,
        menu_order: int = 0
    ) -> Dict[str, Any]:
        """
        Generate an ACF field group configuration
        
        Args:
            group_key: Unique key for the field group
            title: Display title for the field group
            fields: List of field configurations
            location: Location rules for where to show the field group
            menu_order: Order in which to display the field group
        
        Returns:
            Complete ACF field group configuration
        """
        
        if not location:
            location = [[{
                'param': 'post_type',
                'operator': '==',
                'value': 'page'
            }]]
        
        field_group = {
            'key': f'group_{group_key}',
            'title': title,
            'fields': [],
            'location': location,
            'menu_order': menu_order,
            'position': 'normal',
            'style': 'default',
            'label_placement': 'top',
            'instruction_placement': 'label',
            'hide_on_screen': [],
            'active': True,
            'description': f'Generated by KenzySites on {datetime.now().isoformat()}'
        }
        
        # Process each field
        for idx, field_config in enumerate(fields):
            field = self._create_field(field_config, f'{group_key}_{idx}')
            field_group['fields'].append(field)
        
        return field_group
    
    def _create_field(self, config: Dict[str, Any], field_key: str) -> Dict[str, Any]:
        """Create a single ACF field configuration"""
        
        field_type = config.get('type', 'text')
        
        field = {
            'key': f'field_{field_key}',
            'label': config.get('label', 'Field'),
            'name': config.get('name', field_key),
            'type': field_type,
            'instructions': config.get('instructions', ''),
            'required': config.get('required', 0),
            'conditional_logic': config.get('conditional_logic', 0),
            'wrapper': {
                'width': config.get('width', ''),
                'class': config.get('class', ''),
                'id': config.get('id', '')
            }
        }
        
        # Add type-specific configurations
        if field_type == 'text':
            field.update({
                'default_value': config.get('default_value', ''),
                'placeholder': config.get('placeholder', ''),
                'prepend': config.get('prepend', ''),
                'append': config.get('append', ''),
                'maxlength': config.get('maxlength', '')
            })
        
        elif field_type == 'textarea':
            field.update({
                'default_value': config.get('default_value', ''),
                'placeholder': config.get('placeholder', ''),
                'maxlength': config.get('maxlength', ''),
                'rows': config.get('rows', 4),
                'new_lines': config.get('new_lines', 'wpautop')
            })
        
        elif field_type == 'number':
            field.update({
                'default_value': config.get('default_value', ''),
                'placeholder': config.get('placeholder', ''),
                'prepend': config.get('prepend', ''),
                'append': config.get('append', ''),
                'min': config.get('min', ''),
                'max': config.get('max', ''),
                'step': config.get('step', '')
            })
        
        elif field_type == 'image':
            field.update({
                'return_format': config.get('return_format', 'array'),
                'preview_size': config.get('preview_size', 'thumbnail'),
                'library': config.get('library', 'all'),
                'min_width': config.get('min_width', ''),
                'min_height': config.get('min_height', ''),
                'max_width': config.get('max_width', ''),
                'max_height': config.get('max_height', ''),
                'max_size': config.get('max_size', ''),
                'mime_types': config.get('mime_types', '')
            })
        
        elif field_type == 'select':
            field.update({
                'choices': config.get('choices', {}),
                'default_value': config.get('default_value', ''),
                'allow_null': config.get('allow_null', 0),
                'multiple': config.get('multiple', 0),
                'ui': config.get('ui', 0),
                'ajax': config.get('ajax', 0),
                'return_format': config.get('return_format', 'value'),
                'placeholder': config.get('placeholder', '')
            })
        
        elif field_type == 'repeater':
            field.update({
                'collapsed': config.get('collapsed', ''),
                'min': config.get('min', 0),
                'max': config.get('max', 0),
                'layout': config.get('layout', 'table'),
                'button_label': config.get('button_label', 'Adicionar'),
                'sub_fields': [
                    self._create_field(sub_field, f'{field_key}_{i}')
                    for i, sub_field in enumerate(config.get('sub_fields', []))
                ]
            })
        
        elif field_type == 'group':
            field.update({
                'layout': config.get('layout', 'block'),
                'sub_fields': [
                    self._create_field(sub_field, f'{field_key}_{i}')
                    for i, sub_field in enumerate(config.get('sub_fields', []))
                ]
            })
        
        elif field_type == 'flexible_content':
            field.update({
                'layouts': self._create_flexible_layouts(
                    config.get('layouts', []), 
                    field_key
                ),
                'button_label': config.get('button_label', 'Adicionar Seção'),
                'min': config.get('min', ''),
                'max': config.get('max', '')
            })
        
        elif field_type == 'wysiwyg':
            field.update({
                'default_value': config.get('default_value', ''),
                'tabs': config.get('tabs', 'all'),
                'toolbar': config.get('toolbar', 'full'),
                'media_upload': config.get('media_upload', 1),
                'delay': config.get('delay', 0)
            })
        
        elif field_type == 'color_picker':
            field.update({
                'default_value': config.get('default_value', ''),
                'enable_opacity': config.get('enable_opacity', 0)
            })
        
        elif field_type == 'true_false':
            field.update({
                'message': config.get('message', ''),
                'default_value': config.get('default_value', 0),
                'ui': config.get('ui', 0),
                'ui_on_text': config.get('ui_on_text', 'Sim'),
                'ui_off_text': config.get('ui_off_text', 'Não')
            })
        
        return field
    
    def _create_flexible_layouts(self, layouts: List[Dict], parent_key: str) -> List[Dict]:
        """Create flexible content layouts"""
        
        flexible_layouts = []
        
        for idx, layout in enumerate(layouts):
            layout_key = f'{parent_key}_layout_{idx}'
            
            flexible_layout = {
                'key': layout_key,
                'name': layout.get('name', f'layout_{idx}'),
                'label': layout.get('label', 'Layout'),
                'display': layout.get('display', 'block'),
                'sub_fields': [
                    self._create_field(sub_field, f'{layout_key}_{i}')
                    for i, sub_field in enumerate(layout.get('sub_fields', []))
                ],
                'min': layout.get('min', ''),
                'max': layout.get('max', '')
            }
            
            flexible_layouts.append(flexible_layout)
        
        return flexible_layouts
    
    def generate_industry_fields(self, industry: str) -> List[Dict[str, Any]]:
        """
        Generate ACF field groups for specific Brazilian industries
        
        Args:
            industry: Industry identifier
        
        Returns:
            List of field group configurations
        """
        
        field_groups = []
        
        # Base contact fields for all industries
        contact_fields = [
            {
                'name': 'business_name',
                'label': 'Nome do Negócio',
                'type': 'text',
                'required': 1,
                'maxlength': 100
            },
            {
                'name': 'business_logo',
                'label': 'Logo da Empresa',
                'type': 'image',
                'return_format': 'url',
                'preview_size': 'medium'
            },
            {
                'name': 'business_slogan',
                'label': 'Slogan',
                'type': 'text',
                'maxlength': 150,
                'placeholder': 'Seu slogan aqui'
            },
            self.brazilian_fields['telefone'],
            self.brazilian_fields['whatsapp'],
            {
                'name': 'email',
                'label': 'E-mail',
                'type': 'email',
                'required': 1
            },
            {
                'name': 'endereco',
                'label': 'Endereço',
                'type': 'group',
                'sub_fields': [
                    {
                        'name': 'rua',
                        'label': 'Rua',
                        'type': 'text'
                    },
                    {
                        'name': 'numero',
                        'label': 'Número',
                        'type': 'text'
                    },
                    {
                        'name': 'complemento',
                        'label': 'Complemento',
                        'type': 'text'
                    },
                    {
                        'name': 'bairro',
                        'label': 'Bairro',
                        'type': 'text'
                    },
                    {
                        'name': 'cidade',
                        'label': 'Cidade',
                        'type': 'text'
                    },
                    {
                        'name': 'estado',
                        'label': 'Estado',
                        'type': 'select',
                        'choices': self._get_brazilian_states()
                    },
                    self.brazilian_fields['cep']
                ]
            }
        ]
        
        # Add base contact field group
        field_groups.append(self.generate_field_group(
            'contact_info',
            'Informações de Contato',
            contact_fields,
            menu_order=0
        ))
        
        # Industry-specific field groups
        if industry == 'restaurante':
            field_groups.extend(self._generate_restaurant_fields())
        elif industry == 'dentista':
            field_groups.extend(self._generate_dentist_fields())
        elif industry == 'advogado':
            field_groups.extend(self._generate_lawyer_fields())
        elif industry == 'clinica_estetica':
            field_groups.extend(self._generate_aesthetic_clinic_fields())
        elif industry == 'academia':
            field_groups.extend(self._generate_gym_fields())
        elif industry == 'imobiliaria':
            field_groups.extend(self._generate_real_estate_fields())
        elif industry == 'ecommerce':
            field_groups.extend(self._generate_ecommerce_fields())
        elif industry == 'educacao':
            field_groups.extend(self._generate_education_fields())
        elif industry == 'consultoria':
            field_groups.extend(self._generate_consulting_fields())
        else:
            field_groups.extend(self._generate_generic_fields())
        
        # Add Brazilian compliance fields
        field_groups.append(self._generate_brazilian_compliance_fields())
        
        # Add SEO fields
        field_groups.append(self._generate_seo_fields())
        
        return field_groups
    
    def _generate_restaurant_fields(self) -> List[Dict[str, Any]]:
        """Generate fields for restaurant industry"""
        
        field_groups = []
        
        # Restaurant information
        restaurant_fields = [
            {
                'name': 'tipo_cozinha',
                'label': 'Tipo de Cozinha',
                'type': 'select',
                'choices': {
                    'italiana': 'Italiana',
                    'japonesa': 'Japonesa',
                    'brasileira': 'Brasileira',
                    'mexicana': 'Mexicana',
                    'chinesa': 'Chinesa',
                    'francesa': 'Francesa',
                    'vegetariana': 'Vegetariana',
                    'vegana': 'Vegana',
                    'regional': 'Regional',
                    'contemporanea': 'Contemporânea',
                    'outros': 'Outros'
                },
                'multiple': 1
            },
            {
                'name': 'horario_funcionamento',
                'label': 'Horário de Funcionamento',
                'type': 'repeater',
                'layout': 'table',
                'sub_fields': [
                    {
                        'name': 'dia_semana',
                        'label': 'Dia da Semana',
                        'type': 'select',
                        'choices': {
                            'segunda': 'Segunda-feira',
                            'terca': 'Terça-feira',
                            'quarta': 'Quarta-feira',
                            'quinta': 'Quinta-feira',
                            'sexta': 'Sexta-feira',
                            'sabado': 'Sábado',
                            'domingo': 'Domingo'
                        }
                    },
                    {
                        'name': 'abertura',
                        'label': 'Abertura',
                        'type': 'time_picker'
                    },
                    {
                        'name': 'fechamento',
                        'label': 'Fechamento',
                        'type': 'time_picker'
                    }
                ]
            },
            {
                'name': 'capacidade',
                'label': 'Capacidade de Pessoas',
                'type': 'number',
                'min': 1
            },
            {
                'name': 'aceita_reservas',
                'label': 'Aceita Reservas',
                'type': 'true_false',
                'ui': 1
            },
            {
                'name': 'delivery',
                'label': 'Possui Delivery',
                'type': 'true_false',
                'ui': 1
            },
            {
                'name': 'area_entrega',
                'label': 'Área de Entrega',
                'type': 'textarea',
                'rows': 3,
                'conditional_logic': [[{
                    'field': 'field_delivery',
                    'operator': '==',
                    'value': '1'
                }]]
            },
            {
                'name': 'formas_pagamento',
                'label': 'Formas de Pagamento',
                'type': 'checkbox',
                'choices': {
                    'dinheiro': 'Dinheiro',
                    'pix': 'PIX',
                    'cartao_credito': 'Cartão de Crédito',
                    'cartao_debito': 'Cartão de Débito',
                    'vale_refeicao': 'Vale Refeição',
                    'vale_alimentacao': 'Vale Alimentação'
                }
            }
        ]
        
        field_groups.append(self.generate_field_group(
            'restaurant_info',
            'Informações do Restaurante',
            restaurant_fields,
            menu_order=1
        ))
        
        # Menu fields
        menu_fields = [
            {
                'name': 'cardapio',
                'label': 'Cardápio',
                'type': 'repeater',
                'layout': 'row',
                'button_label': 'Adicionar Item',
                'sub_fields': [
                    {
                        'name': 'categoria',
                        'label': 'Categoria',
                        'type': 'select',
                        'choices': {
                            'entrada': 'Entrada',
                            'prato_principal': 'Prato Principal',
                            'sobremesa': 'Sobremesa',
                            'bebida': 'Bebida',
                            'promocao': 'Promoção'
                        }
                    },
                    {
                        'name': 'nome_prato',
                        'label': 'Nome do Prato',
                        'type': 'text',
                        'required': 1
                    },
                    {
                        'name': 'descricao',
                        'label': 'Descrição',
                        'type': 'textarea',
                        'rows': 2
                    },
                    {
                        'name': 'preco',
                        'label': 'Preço',
                        'type': 'number',
                        'prepend': 'R$',
                        'min': 0,
                        'step': 0.01
                    },
                    {
                        'name': 'foto_prato',
                        'label': 'Foto do Prato',
                        'type': 'image',
                        'return_format': 'url'
                    },
                    {
                        'name': 'destaque',
                        'label': 'Prato em Destaque',
                        'type': 'true_false'
                    }
                ]
            }
        ]
        
        field_groups.append(self.generate_field_group(
            'restaurant_menu',
            'Cardápio',
            menu_fields,
            menu_order=2
        ))
        
        return field_groups
    
    def _generate_dentist_fields(self) -> List[Dict[str, Any]]:
        """Generate fields for dentist clinic"""
        
        field_groups = []
        
        # Dentist information
        dentist_fields = [
            {
                'name': 'cro',
                'label': 'CRO',
                'type': 'text',
                'instructions': 'Número do registro no Conselho Regional de Odontologia',
                'required': 1
            },
            {
                'name': 'especialidades',
                'label': 'Especialidades',
                'type': 'checkbox',
                'choices': {
                    'ortodontia': 'Ortodontia',
                    'implantodontia': 'Implantodontia',
                    'endodontia': 'Endodontia',
                    'periodontia': 'Periodontia',
                    'protese': 'Prótese',
                    'estetica': 'Estética',
                    'odontopediatria': 'Odontopediatria',
                    'cirurgia': 'Cirurgia Bucomaxilofacial',
                    'clareamento': 'Clareamento',
                    'geral': 'Clínica Geral'
                }
            },
            {
                'name': 'convenios',
                'label': 'Convênios Aceitos',
                'type': 'repeater',
                'layout': 'table',
                'button_label': 'Adicionar Convênio',
                'sub_fields': [
                    {
                        'name': 'nome_convenio',
                        'label': 'Nome do Convênio',
                        'type': 'text'
                    },
                    {
                        'name': 'logo_convenio',
                        'label': 'Logo',
                        'type': 'image',
                        'return_format': 'url'
                    }
                ]
            },
            {
                'name': 'emergencia_24h',
                'label': 'Atendimento de Emergência 24h',
                'type': 'true_false',
                'ui': 1
            },
            {
                'name': 'agendamento_online',
                'label': 'Agendamento Online',
                'type': 'true_false',
                'ui': 1
            }
        ]
        
        field_groups.append(self.generate_field_group(
            'dentist_info',
            'Informações da Clínica Odontológica',
            dentist_fields,
            menu_order=1
        ))
        
        # Services and procedures
        services_fields = [
            {
                'name': 'procedimentos',
                'label': 'Procedimentos Oferecidos',
                'type': 'repeater',
                'layout': 'row',
                'button_label': 'Adicionar Procedimento',
                'sub_fields': [
                    {
                        'name': 'nome_procedimento',
                        'label': 'Nome do Procedimento',
                        'type': 'text',
                        'required': 1
                    },
                    {
                        'name': 'descricao',
                        'label': 'Descrição',
                        'type': 'textarea',
                        'rows': 3
                    },
                    {
                        'name': 'duracao_media',
                        'label': 'Duração Média',
                        'type': 'text',
                        'placeholder': 'Ex: 30 minutos'
                    },
                    {
                        'name': 'preco_base',
                        'label': 'Preço Base',
                        'type': 'text',
                        'prepend': 'R$',
                        'placeholder': 'A partir de'
                    }
                ]
            }
        ]
        
        field_groups.append(self.generate_field_group(
            'dentist_services',
            'Serviços e Procedimentos',
            services_fields,
            menu_order=2
        ))
        
        return field_groups
    
    def _generate_lawyer_fields(self) -> List[Dict[str, Any]]:
        """Generate fields for law firm"""
        
        field_groups = []
        
        # Lawyer information
        lawyer_fields = [
            {
                'name': 'oab',
                'label': 'Número da OAB',
                'type': 'text',
                'instructions': 'Número de registro na Ordem dos Advogados do Brasil',
                'required': 1
            },
            {
                'name': 'areas_atuacao',
                'label': 'Áreas de Atuação',
                'type': 'checkbox',
                'choices': {
                    'civil': 'Direito Civil',
                    'criminal': 'Direito Criminal',
                    'trabalhista': 'Direito Trabalhista',
                    'familia': 'Direito de Família',
                    'empresarial': 'Direito Empresarial',
                    'tributario': 'Direito Tributário',
                    'consumidor': 'Direito do Consumidor',
                    'imobiliario': 'Direito Imobiliário',
                    'previdenciario': 'Direito Previdenciário',
                    'digital': 'Direito Digital'
                }
            },
            {
                'name': 'consulta_gratuita',
                'label': 'Oferece Consulta Gratuita',
                'type': 'true_false',
                'ui': 1
            },
            {
                'name': 'atendimento_online',
                'label': 'Atendimento Online',
                'type': 'true_false',
                'ui': 1
            },
            {
                'name': 'experiencia_anos',
                'label': 'Anos de Experiência',
                'type': 'number',
                'min': 0
            }
        ]
        
        field_groups.append(self.generate_field_group(
            'lawyer_info',
            'Informações do Escritório de Advocacia',
            lawyer_fields,
            menu_order=1
        ))
        
        return field_groups
    
    def _generate_aesthetic_clinic_fields(self) -> List[Dict[str, Any]]:
        """Generate fields for aesthetic clinic"""
        
        field_groups = []
        
        # Clinic information
        clinic_fields = [
            {
                'name': 'responsavel_tecnico',
                'label': 'Responsável Técnico',
                'type': 'text',
                'required': 1
            },
            {
                'name': 'registro_profissional',
                'label': 'Registro Profissional',
                'type': 'text',
                'instructions': 'CRM, CRF ou outro registro profissional'
            },
            {
                'name': 'procedimentos_esteticos',
                'label': 'Procedimentos Estéticos',
                'type': 'checkbox',
                'choices': {
                    'botox': 'Botox',
                    'preenchimento': 'Preenchimento Facial',
                    'harmonizacao': 'Harmonização Facial',
                    'limpeza_pele': 'Limpeza de Pele',
                    'peeling': 'Peeling',
                    'laser': 'Tratamentos a Laser',
                    'criolipolise': 'Criolipólise',
                    'depilacao_laser': 'Depilação a Laser',
                    'microagulhamento': 'Microagulhamento',
                    'bioestimuladores': 'Bioestimuladores'
                }
            },
            {
                'name': 'avaliacao_gratuita',
                'label': 'Avaliação Gratuita',
                'type': 'true_false',
                'ui': 1
            }
        ]
        
        field_groups.append(self.generate_field_group(
            'aesthetic_clinic_info',
            'Informações da Clínica de Estética',
            clinic_fields,
            menu_order=1
        ))
        
        return field_groups
    
    def _generate_gym_fields(self) -> List[Dict[str, Any]]:
        """Generate fields for gym/fitness center"""
        
        field_groups = []
        
        # Gym information
        gym_fields = [
            {
                'name': 'modalidades',
                'label': 'Modalidades Oferecidas',
                'type': 'checkbox',
                'choices': {
                    'musculacao': 'Musculação',
                    'crossfit': 'CrossFit',
                    'funcional': 'Funcional',
                    'pilates': 'Pilates',
                    'yoga': 'Yoga',
                    'spinning': 'Spinning',
                    'natacao': 'Natação',
                    'artes_marciais': 'Artes Marciais',
                    'danca': 'Dança',
                    'personal': 'Personal Trainer'
                }
            },
            {
                'name': 'horario_funcionamento',
                'label': 'Horário de Funcionamento',
                'type': 'group',
                'sub_fields': [
                    {
                        'name': 'semana',
                        'label': 'Segunda a Sexta',
                        'type': 'text',
                        'placeholder': 'Ex: 06:00 às 23:00'
                    },
                    {
                        'name': 'sabado',
                        'label': 'Sábado',
                        'type': 'text',
                        'placeholder': 'Ex: 08:00 às 18:00'
                    },
                    {
                        'name': 'domingo',
                        'label': 'Domingo',
                        'type': 'text',
                        'placeholder': 'Ex: 09:00 às 14:00'
                    }
                ]
            },
            {
                'name': 'aula_experimental',
                'label': 'Aula Experimental Gratuita',
                'type': 'true_false',
                'ui': 1
            },
            {
                'name': 'estacionamento',
                'label': 'Possui Estacionamento',
                'type': 'true_false',
                'ui': 1
            }
        ]
        
        field_groups.append(self.generate_field_group(
            'gym_info',
            'Informações da Academia',
            gym_fields,
            menu_order=1
        ))
        
        # Plans and pricing
        plans_fields = [
            {
                'name': 'planos',
                'label': 'Planos',
                'type': 'repeater',
                'layout': 'row',
                'button_label': 'Adicionar Plano',
                'sub_fields': [
                    {
                        'name': 'nome_plano',
                        'label': 'Nome do Plano',
                        'type': 'text',
                        'required': 1
                    },
                    {
                        'name': 'descricao',
                        'label': 'Descrição',
                        'type': 'textarea',
                        'rows': 2
                    },
                    {
                        'name': 'preco_mensal',
                        'label': 'Preço Mensal',
                        'type': 'number',
                        'prepend': 'R$',
                        'min': 0
                    },
                    {
                        'name': 'beneficios',
                        'label': 'Benefícios',
                        'type': 'textarea',
                        'rows': 3,
                        'instructions': 'Liste os benefícios, um por linha'
                    }
                ]
            }
        ]
        
        field_groups.append(self.generate_field_group(
            'gym_plans',
            'Planos e Preços',
            plans_fields,
            menu_order=2
        ))
        
        return field_groups
    
    def _generate_real_estate_fields(self) -> List[Dict[str, Any]]:
        """Generate fields for real estate agency"""
        
        field_groups = []
        
        # Real estate information
        real_estate_fields = [
            {
                'name': 'creci',
                'label': 'CRECI',
                'type': 'text',
                'instructions': 'Número do registro no Conselho Regional de Corretores de Imóveis',
                'required': 1
            },
            {
                'name': 'tipos_imoveis',
                'label': 'Tipos de Imóveis',
                'type': 'checkbox',
                'choices': {
                    'apartamento': 'Apartamento',
                    'casa': 'Casa',
                    'terreno': 'Terreno',
                    'comercial': 'Comercial',
                    'rural': 'Rural',
                    'industrial': 'Industrial',
                    'cobertura': 'Cobertura',
                    'kitnet': 'Kitnet/Studio'
                }
            },
            {
                'name': 'servicos',
                'label': 'Serviços Oferecidos',
                'type': 'checkbox',
                'choices': {
                    'venda': 'Venda',
                    'aluguel': 'Aluguel',
                    'administracao': 'Administração de Imóveis',
                    'avaliacao': 'Avaliação de Imóveis',
                    'consultoria': 'Consultoria Imobiliária',
                    'financiamento': 'Assessoria em Financiamento'
                }
            },
            {
                'name': 'regioes_atendidas',
                'label': 'Regiões Atendidas',
                'type': 'textarea',
                'rows': 3,
                'instructions': 'Liste as regiões/bairros atendidos'
            }
        ]
        
        field_groups.append(self.generate_field_group(
            'real_estate_info',
            'Informações da Imobiliária',
            real_estate_fields,
            menu_order=1
        ))
        
        return field_groups
    
    def _generate_ecommerce_fields(self) -> List[Dict[str, Any]]:
        """Generate fields for e-commerce"""
        
        field_groups = []
        
        # E-commerce information
        ecommerce_fields = [
            self.brazilian_fields['cnpj'],
            {
                'name': 'categorias_produtos',
                'label': 'Categorias de Produtos',
                'type': 'textarea',
                'rows': 3,
                'instructions': 'Liste as principais categorias de produtos'
            },
            {
                'name': 'formas_pagamento',
                'label': 'Formas de Pagamento',
                'type': 'checkbox',
                'choices': {
                    'pix': 'PIX',
                    'boleto': 'Boleto',
                    'cartao_credito': 'Cartão de Crédito',
                    'cartao_debito': 'Cartão de Débito',
                    'transferencia': 'Transferência Bancária',
                    'mercado_pago': 'Mercado Pago',
                    'paypal': 'PayPal',
                    'pagseguro': 'PagSeguro'
                }
            },
            {
                'name': 'frete_gratis',
                'label': 'Frete Grátis',
                'type': 'text',
                'placeholder': 'Ex: Acima de R$ 199,00'
            },
            {
                'name': 'prazo_entrega',
                'label': 'Prazo de Entrega',
                'type': 'text',
                'placeholder': 'Ex: 3 a 7 dias úteis'
            },
            {
                'name': 'troca_devolucao',
                'label': 'Política de Troca e Devolução',
                'type': 'textarea',
                'rows': 3
            }
        ]
        
        field_groups.append(self.generate_field_group(
            'ecommerce_info',
            'Informações do E-commerce',
            ecommerce_fields,
            menu_order=1
        ))
        
        return field_groups
    
    def _generate_education_fields(self) -> List[Dict[str, Any]]:
        """Generate fields for educational institution"""
        
        field_groups = []
        
        # Education information
        education_fields = [
            {
                'name': 'tipo_instituicao',
                'label': 'Tipo de Instituição',
                'type': 'select',
                'choices': {
                    'escola_infantil': 'Escola Infantil',
                    'escola_fundamental': 'Escola Fundamental',
                    'escola_medio': 'Escola Médio',
                    'curso_tecnico': 'Curso Técnico',
                    'curso_livre': 'Curso Livre',
                    'curso_idiomas': 'Curso de Idiomas',
                    'preparatorio': 'Curso Preparatório',
                    'universidade': 'Universidade/Faculdade'
                }
            },
            {
                'name': 'mec_autorizado',
                'label': 'Autorizado pelo MEC',
                'type': 'true_false',
                'ui': 1
            },
            {
                'name': 'modalidades_ensino',
                'label': 'Modalidades de Ensino',
                'type': 'checkbox',
                'choices': {
                    'presencial': 'Presencial',
                    'ead': 'EAD (Ensino a Distância)',
                    'hibrido': 'Híbrido',
                    'intensivo': 'Intensivo'
                }
            },
            {
                'name': 'matriculas_abertas',
                'label': 'Matrículas Abertas',
                'type': 'true_false',
                'ui': 1
            }
        ]
        
        field_groups.append(self.generate_field_group(
            'education_info',
            'Informações da Instituição de Ensino',
            education_fields,
            menu_order=1
        ))
        
        # Courses
        courses_fields = [
            {
                'name': 'cursos',
                'label': 'Cursos Oferecidos',
                'type': 'repeater',
                'layout': 'row',
                'button_label': 'Adicionar Curso',
                'sub_fields': [
                    {
                        'name': 'nome_curso',
                        'label': 'Nome do Curso',
                        'type': 'text',
                        'required': 1
                    },
                    {
                        'name': 'duracao',
                        'label': 'Duração',
                        'type': 'text',
                        'placeholder': 'Ex: 6 meses, 2 anos'
                    },
                    {
                        'name': 'carga_horaria',
                        'label': 'Carga Horária',
                        'type': 'text',
                        'placeholder': 'Ex: 360 horas'
                    },
                    {
                        'name': 'investimento',
                        'label': 'Investimento',
                        'type': 'text',
                        'prepend': 'R$',
                        'placeholder': 'Mensalidade ou valor total'
                    }
                ]
            }
        ]
        
        field_groups.append(self.generate_field_group(
            'education_courses',
            'Cursos',
            courses_fields,
            menu_order=2
        ))
        
        return field_groups
    
    def _generate_consulting_fields(self) -> List[Dict[str, Any]]:
        """Generate fields for consulting business"""
        
        field_groups = []
        
        # Consulting information
        consulting_fields = [
            {
                'name': 'areas_consultoria',
                'label': 'Áreas de Consultoria',
                'type': 'checkbox',
                'choices': {
                    'estrategia': 'Estratégia Empresarial',
                    'financeira': 'Consultoria Financeira',
                    'marketing': 'Marketing e Vendas',
                    'rh': 'Recursos Humanos',
                    'tecnologia': 'Tecnologia e Inovação',
                    'processos': 'Gestão de Processos',
                    'qualidade': 'Qualidade',
                    'sustentabilidade': 'Sustentabilidade',
                    'tributaria': 'Consultoria Tributária'
                }
            },
            {
                'name': 'porte_clientes',
                'label': 'Porte de Clientes Atendidos',
                'type': 'checkbox',
                'choices': {
                    'mei': 'MEI',
                    'pequena': 'Pequena Empresa',
                    'media': 'Média Empresa',
                    'grande': 'Grande Empresa',
                    'multinacional': 'Multinacional'
                }
            },
            {
                'name': 'consulta_inicial_gratuita',
                'label': 'Consulta Inicial Gratuita',
                'type': 'true_false',
                'ui': 1
            }
        ]
        
        field_groups.append(self.generate_field_group(
            'consulting_info',
            'Informações de Consultoria',
            consulting_fields,
            menu_order=1
        ))
        
        return field_groups
    
    def _generate_generic_fields(self) -> List[Dict[str, Any]]:
        """Generate generic business fields"""
        
        field_groups = []
        
        # Generic business information
        generic_fields = [
            {
                'name': 'sobre_empresa',
                'label': 'Sobre a Empresa',
                'type': 'wysiwyg',
                'toolbar': 'full',
                'media_upload': 1
            },
            {
                'name': 'missao',
                'label': 'Missão',
                'type': 'textarea',
                'rows': 3
            },
            {
                'name': 'visao',
                'label': 'Visão',
                'type': 'textarea',
                'rows': 3
            },
            {
                'name': 'valores',
                'label': 'Valores',
                'type': 'textarea',
                'rows': 4,
                'instructions': 'Liste os valores da empresa'
            }
        ]
        
        field_groups.append(self.generate_field_group(
            'generic_business_info',
            'Informações do Negócio',
            generic_fields,
            menu_order=1
        ))
        
        # Services
        services_fields = [
            {
                'name': 'servicos',
                'label': 'Serviços/Produtos',
                'type': 'repeater',
                'layout': 'row',
                'button_label': 'Adicionar Serviço/Produto',
                'sub_fields': [
                    {
                        'name': 'nome',
                        'label': 'Nome',
                        'type': 'text',
                        'required': 1
                    },
                    {
                        'name': 'descricao',
                        'label': 'Descrição',
                        'type': 'textarea',
                        'rows': 3
                    },
                    {
                        'name': 'preco',
                        'label': 'Preço',
                        'type': 'text',
                        'prepend': 'R$'
                    },
                    {
                        'name': 'imagem',
                        'label': 'Imagem',
                        'type': 'image',
                        'return_format': 'url'
                    }
                ]
            }
        ]
        
        field_groups.append(self.generate_field_group(
            'generic_services',
            'Serviços/Produtos',
            services_fields,
            menu_order=2
        ))
        
        return field_groups
    
    def _generate_brazilian_compliance_fields(self) -> Dict[str, Any]:
        """Generate Brazilian compliance and legal fields"""
        
        compliance_fields = [
            self.brazilian_fields['cnpj'],
            {
                'name': 'inscricao_estadual',
                'label': 'Inscrição Estadual',
                'type': 'text'
            },
            {
                'name': 'inscricao_municipal',
                'label': 'Inscrição Municipal',
                'type': 'text'
            },
            self.brazilian_fields['pix'],
            {
                'name': 'lgpd_compliance',
                'label': 'Conformidade LGPD',
                'type': 'group',
                'sub_fields': [
                    {
                        'name': 'politica_privacidade',
                        'label': 'Link da Política de Privacidade',
                        'type': 'url'
                    },
                    {
                        'name': 'termos_uso',
                        'label': 'Link dos Termos de Uso',
                        'type': 'url'
                    },
                    {
                        'name': 'dpo_contato',
                        'label': 'Contato do DPO (Encarregado de Dados)',
                        'type': 'email'
                    }
                ]
            }
        ]
        
        return self.generate_field_group(
            'brazilian_compliance',
            'Informações Legais e Compliance',
            compliance_fields,
            menu_order=8
        )
    
    def _generate_seo_fields(self) -> Dict[str, Any]:
        """Generate SEO optimization fields"""
        
        seo_fields = [
            {
                'name': 'seo_title',
                'label': 'Título SEO',
                'type': 'text',
                'maxlength': 60,
                'instructions': 'Título para mecanismos de busca (máx. 60 caracteres)'
            },
            {
                'name': 'seo_description',
                'label': 'Meta Descrição',
                'type': 'textarea',
                'rows': 3,
                'maxlength': 160,
                'instructions': 'Descrição para mecanismos de busca (máx. 160 caracteres)'
            },
            {
                'name': 'seo_keywords',
                'label': 'Palavras-chave',
                'type': 'text',
                'instructions': 'Palavras-chave separadas por vírgula'
            },
            {
                'name': 'og_image',
                'label': 'Imagem para Redes Sociais',
                'type': 'image',
                'return_format': 'url',
                'instructions': 'Imagem para compartilhamento (1200x630px recomendado)'
            }
        ]
        
        return self.generate_field_group(
            'seo_settings',
            'Configurações SEO',
            seo_fields,
            menu_order=9
        )
    
    def _get_brazilian_states(self) -> Dict[str, str]:
        """Get Brazilian states for select fields"""
        
        return {
            'AC': 'Acre',
            'AL': 'Alagoas',
            'AP': 'Amapá',
            'AM': 'Amazonas',
            'BA': 'Bahia',
            'CE': 'Ceará',
            'DF': 'Distrito Federal',
            'ES': 'Espírito Santo',
            'GO': 'Goiás',
            'MA': 'Maranhão',
            'MT': 'Mato Grosso',
            'MS': 'Mato Grosso do Sul',
            'MG': 'Minas Gerais',
            'PA': 'Pará',
            'PB': 'Paraíba',
            'PR': 'Paraná',
            'PE': 'Pernambuco',
            'PI': 'Piauí',
            'RJ': 'Rio de Janeiro',
            'RN': 'Rio Grande do Norte',
            'RS': 'Rio Grande do Sul',
            'RO': 'Rondônia',
            'RR': 'Roraima',
            'SC': 'Santa Catarina',
            'SP': 'São Paulo',
            'SE': 'Sergipe',
            'TO': 'Tocantins'
        }
    
    def export_to_json(self, field_groups: List[Dict[str, Any]]) -> str:
        """Export field groups to JSON format for ACF import"""
        
        return json.dumps(field_groups, indent=2, ensure_ascii=False)
    
    def export_to_php(self, field_groups: List[Dict[str, Any]]) -> str:
        """Export field groups to PHP format for ACF registration"""
        
        php_code = "<?php\n\n"
        php_code += "if( function_exists('acf_add_local_field_group') ):\n\n"
        
        for group in field_groups:
            php_code += f"acf_add_local_field_group({self._dict_to_php_array(group)});\n\n"
        
        php_code += "endif;"
        
        return php_code
    
    def _dict_to_php_array(self, data: Any, indent: int = 1) -> str:
        """Convert Python dict to PHP array format"""
        
        if isinstance(data, dict):
            items = []
            for key, value in data.items():
                php_value = self._dict_to_php_array(value, indent + 1)
                items.append(f"{'    ' * indent}'{key}' => {php_value}")
            
            return "array(\n" + ",\n".join(items) + f"\n{'    ' * (indent - 1)})"
        
        elif isinstance(data, list):
            items = []
            for value in data:
                php_value = self._dict_to_php_array(value, indent + 1)
                items.append(f"{'    ' * indent}{php_value}")
            
            return "array(\n" + ",\n".join(items) + f"\n{'    ' * (indent - 1)})"
        
        elif isinstance(data, bool):
            return 'true' if data else 'false'
        
        elif isinstance(data, (int, float)):
            return str(data)
        
        elif data is None:
            return 'null'
        
        else:
            # Escape single quotes in strings
            escaped = str(data).replace("'", "\\'")
            return f"'{escaped}'"

# Initialize the service
acf_service = ACFIntegrationService()